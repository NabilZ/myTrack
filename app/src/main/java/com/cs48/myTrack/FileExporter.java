package com.cs48.myTrack;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;

/**
 * A class responsible for handling file export from the application to industry standard file formats
 */
public class FileExporter {
	// Get
	public boolean exportKML(Context context) {
		if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
			// If the sdcard isn't mounted as readable, quit without doing anything
			return false;
		}
		File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);
		if (!path.exists()) {
			path.mkdir();
		}
		System.currentTimeMillis();
		Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
		TimeZone tz = TimeZone.getTimeZone("UTC");
		// ISO 8601 compliant date format used by KML
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");
		DateFormat fileFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm");
		df.setTimeZone(tz);
		fileFormat.setTimeZone(tz);
		//String fileName = df.format(Calendar.getInstance().getTimeInMillis());
		String fileName = fileFormat.format(Calendar.getInstance().getTimeInMillis());
		File outfile = new File(path, fileName + "-myTrack.kml");
		Log.i("myTrack/FileExporter", "Writing file to " + path + fileName);
		DatabaseHelper databaseHelper = new DatabaseHelper(context);
		try {
			FileWriter fileWriter = new FileWriter(outfile);
			BufferedWriter writer = new BufferedWriter(fileWriter);
			// Currently gets all locations, in future should respect user's current time range preferences
			List<LocationInfo> locationList = databaseHelper.getAllLocations();

			//Write KML header
			writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
					"<kml xmlns=\"http://www.opengis.net/kml/2.2\">\n" + "\t<Document>\n");

			writer.write("\t<description>Generated by myTrack</description>");

			writer.write("\t<Style id=\"paddle-a\">\n" +
					"\t  <IconStyle>\n" +
					"\t\t<Icon>\n" +
					"\t\t  <href>https://maps.google.com/mapfiles/kml/paddle/red-blank.png</href>\n" +
					"\t\t</Icon>\n" +
					"\t\t<hotSpot x=\"32\" y=\"1\" xunits=\"pixels\" yunits=\"pixels\"/>\n" +
					"\t  </IconStyle>\n" +
					"\t</Style>\n");

			// Write individual points
			for (LocationInfo location: locationList) {
				writer.write("\t<Placemark>\n" +
						"\t\t<description>" + location.get_Description() + "</description>\n" +
						"\t\t<TimeStamp>\n" +
						"\t\t  <when>" + df.format(location.getTime()) + "</when>\n" +
						"\t\t</TimeStamp>\n" +
						"\t\t<styleUrl>#paddle-a</styleUrl>\n" +
						"\t\t<Point>\n" +
						"\t\t  <coordinates>" + location.get_Longitude() + "," + location.get_Latitude() + "0</coordinates>\n" +
						"\t\t</Point>\n" +
						"\t</Placemark>\n");
			}
			writer.write("\t</Document>\n");
			writer.write("</kml>\n");
			writer.close();
			fileWriter.close();
			Log.i("myTrack/FileExporter", "File written to " + path + fileName);

		} catch (IOException ex){
			Log.e("myTrack/FileExporter", "Error: unable to write to file");
			return false;
		} finally {
			databaseHelper.close();
		}
		return true;




	}
}
